/*
 * fluid
 * v0.0.1
 * 2014-11-03
 **/

!function() {
    "use strict";
    function a(a, b) {
        function c() {}
        c.prototype = a;
        var d = new c();
        for (var e in b) d[e] = b[e];
        return b.toString !== Object.prototype.toString && (d.toString = b.toString), d;
    }
    function b(a, b) {
        if (null == b) return null;
        null == b.__id__ && (b.__id__ = g++);
        var c;
        return null == a.hx__closures__ ? a.hx__closures__ = {} : c = a.hx__closures__[b.__id__], 
        null == c && (c = function() {
            return c.method.apply(c.scope, arguments);
        }, c.scope = a, c.method = b, a.hx__closures__[b.__id__] = c), c;
    }
    var c = function() {};
    c.random = function(a) {
        return 0 >= a ? 0 : Math.floor(Math.random() * a);
    };
    var d = {};
    d.display = {}, d.display.FluidSprite = function(a) {
        PIXI.Sprite.call(this, a);
    }, d.display.FluidSprite.__super__ = PIXI.Sprite, d.display.FluidSprite.prototype = a(PIXI.Sprite.prototype, {});
    var e = {};
    e.arm = {}, e.arm.demo = {}, e.arm.demo.Bunny = function(a) {
        d.display.FluidSprite.call(this, a);
    }, e.arm.demo.Bunny.__super__ = d.display.FluidSprite, e.arm.demo.Bunny.prototype = a(d.display.FluidSprite.prototype, {}), 
    d.Fluid = function() {
        this._fluidFrameSkip = !1, this.skipFrame = !1, this.elapsedTime = 0, this._lastTime = new Date(), 
        this._setStageProperties();
        var a = window.document;
        this._canvas = a.createElement("canvas"), this._canvas.style.width = d.StageProperties.screenWidth + "px", 
        this._canvas.style.height = d.StageProperties.screenHeight + "px", window.document.body.appendChild(this._canvas), 
        this.stage = new PIXI.Stage(16777215), this.container = new PIXI.DisplayObjectContainer(), 
        this.stage.addChild(this.container), this.stage.mousedown = b(this, this._fluidOnMouseDown), 
        this.stage.mouseout = b(this, this._fluidOnMouseOut), this.stage.mouseover = b(this, this._fluidOnMouseOver), 
        this.stage.mouseup = b(this, this._fluidOnMouseUp), this.stage.click = b(this, this._fluidOnMouseClick), 
        this.stage.rightclick = b(this, this._fluidOnRightClick), this.stage.rightdown = b(this, this._fluidOnRightMouseDown), 
        this.stage.rightup = b(this, this._fluidOnRightMouseUp), this.stage.touchstart = b(this, this._fluidOnTouchBegin), 
        this.stage.touchend = b(this, this._fluidOnTouchEnd), this.stage.touchendoutside = b(this, this._fluidOnTouchOut);
        var c = new f.utils.RenderingOptions();
        c.view = this._canvas, c.resolution = d.StageProperties.pixelRatio, this._renderer = PIXI.autoDetectRenderer(d.StageProperties.screenWidth, d.StageProperties.screenHeight, c), 
        window.document.body.appendChild(this._renderer.view), window.onresize = b(this, this._fluidOnResize), 
        window.requestAnimationFrame(b(this, this._fluidOnUpdate)), this._lastTime = new Date();
    }, d.Fluid.prototype = {
        _setStageProperties: function() {
            d.StageProperties.pixelRatio = window.devicePixelRatio, d.StageProperties.screenWidth = window.innerWidth, 
            d.StageProperties.screenHeight = window.innerHeight, d.StageProperties.orientation = d.StageProperties.screenWidth > d.StageProperties.screenHeight ? "LANDSCAPE" : "PORTRAIT";
        },
        _fluidOnMouseDown: function(a) {
            null != this.mouseDown && this.mouseDown(a);
        },
        _fluidOnMouseOver: function(a) {
            null != this.mouseOver && this.mouseOver(a);
        },
        _fluidOnMouseOut: function(a) {
            null != this.mouseOut && this.mouseOut(a);
        },
        _fluidOnMouseUp: function(a) {
            null != this.mouseUp && this.mouseUp(a);
        },
        _fluidOnMouseClick: function(a) {
            null != this.click && this.click(a);
        },
        _fluidOnRightClick: function(a) {
            null != this.rightClick && this.rightClick(a);
        },
        _fluidOnRightMouseDown: function(a) {
            null != this.rightMouseDown && this.rightMouseDown(a);
        },
        _fluidOnRightMouseUp: function(a) {
            null != this.rightMouseUp && this.rightMouseUp(a);
        },
        _fluidOnTouchBegin: function(a) {
            null != this.touchBegin && this.touchBegin(a);
        },
        _fluidOnTouchEnd: function(a) {
            null != this.touchEnd && this.touchEnd(a);
        },
        _fluidOnTouchOut: function(a) {
            null != this.touchOut && this.touchOut(a);
        },
        _fluidOnUpdate: function() {
            this.skipFrame && this._fluidFrameSkip ? this._fluidFrameSkip = !1 : (this._fluidFrameSkip = !0, 
            this._fluidCalculateElapsedTime(), this._update(this.elapsedTime), this._renderer.render(this.stage)), 
            window.requestAnimationFrame(b(this, this._fluidOnUpdate)), null != this._stats && this._stats.update();
        },
        _fluidCalculateElapsedTime: function() {
            this._currentTime = new Date(), this.elapsedTime = this._currentTime.getTime() - this._lastTime.getTime(), 
            this._lastTime = this._currentTime;
        },
        _fluidOnResize: function() {
            this._setStageProperties(), this._resize();
        },
        _update: function() {},
        _resize: function() {},
        _showStats: function() {
            var a = window.document.createElement("div");
            window.document.body.appendChild(a), this._stats = new Stats(), this._stats.domElement.style.position = "absolute", 
            this._stats.domElement.style.top = "6px", this._stats.domElement.style.right = "6px", 
            a.appendChild(this._stats.domElement), this._stats.begin();
        }
    }, e.arm.demo.Main = function() {
        this._addBunnies = !1, this._count = 0;
        var a = this;
        d.Fluid.call(this), this.skipFrame = !0, this._minX = this._minY = 0, this._maxX = d.StageProperties.screenWidth, 
        this._maxY = d.StageProperties.screenHeight, this._sprites = [], this._countText = new d.text.FluidText("BUNNIES: 0"), 
        this.container.addChild(this._countText), this._bunnyTexture = d.FluidAssets.getImage("assets/bunny.png"), 
        this._showStats(), this.touchBegin = function() {
            a._addBunnies = !0;
        }, this.mouseDown = function() {
            a._addBunnies = !0;
        }, this.mouseUp = function() {
            a._addBunnies = !1;
        }, this.touchEnd = this.touchOut = function() {
            a._addBunnies = !1;
        };
    }, e.arm.demo.Main.main = function() {
        new e.arm.demo.Main();
    }, e.arm.demo.Main.__super__ = d.Fluid, e.arm.demo.Main.prototype = a(d.Fluid.prototype, {
        _addBunnys: function(a) {
            this._count += a, this._countText.setText("BUNNIES: " + this._count);
            for (var b = 0; a > b; ) {
                var f = (b++, new e.arm.demo.Bunny(this._bunnyTexture));
                this.container.addChild(f), f.x = c.random(0 | d.StageProperties.screenWidth), f.y = c.random(0 | d.StageProperties.screenHeight), 
                f.speedX = 16 * Math.random() + 2, f.speedY = 16 * Math.random() - 10, f.rotationSpeed = Math.random() / 50 + .01, 
                f.scaleSpeed = Math.random() / 50 + .01, this._sprites.push(f);
            }
        },
        _update: function() {
            if (this._addBunnies && this._addBunnys(10), this._sprites.length > 0) for (var a = 0, b = this._sprites.length; b > a; ) {
                var c = a++, d = this._sprites[c];
                d.x += d.speedX, d.y += d.speedY, d.speedY += 4.75, d.x > this._maxX ? (d.speedX *= -1, 
                d.x = this._maxX) : d.x < this._minX && (d.speedX *= -1, d.x = this._minX), d.y > this._maxY ? (d.speedY *= -.9, 
                d.y = this._maxY, Math.random() > .5 && (d.speedY -= 6 * Math.random())) : d.y < this._minY && (d.speedY = 0, 
                d.y = this._minY);
            }
        },
        _resize: function() {
            this._maxX = d.StageProperties.screenWidth, this._maxY = d.StageProperties.screenHeight;
        }
    }), d.FluidAssets = function() {}, d.FluidAssets.getImage = function(a) {
        return PIXI.Texture.fromImage(a);
    }, d.StageProperties = function() {}, d.text = {}, d.text.FluidText = function(a) {
        PIXI.Text.call(this, a);
    }, d.text.FluidText.__super__ = PIXI.Text, d.text.FluidText.prototype = a(PIXI.Text.prototype, {
        setText: function(a) {
            PIXI.Text.prototype.setText.call(this, a);
        }
    });
    var f = {};
    f.text = {}, f.text.TextStyle = function() {}, f.utils = {}, f.utils.RenderingOptions = function(a, b, c) {
        this.resolution = 1, this.transparent = !1, null != a && (this.view = a), null != b && (this.resolution = b), 
        null != c && (this.transparent = c);
    };
    var g = 0;
    Math.NaN = Number.NaN, Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY, Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY, 
    Math.isFinite = function(a) {
        return isFinite(a);
    }, Math.isNaN = function(a) {
        return isNaN(a);
    }, d.StageProperties.pixelRatio = 1, d.StageProperties.screenWidth = 800, d.StageProperties.screenHeight = 600, 
    e.arm.demo.Main.main();
}();
//# sourceMappingURL=fluid.min.js.map